# Dockerfile
# Use node alpine as it's a small node image
FROM node:18 as builder

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json package-lock.json ./
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production
ENV PATH /opt/node_modules/.bin:$PATH
ENV NEXT_SHARP_PATH /opt/node_modules/sharp

WORKDIR /opt/app
COPY . .

# Change prod env for env
RUN mv .env.prod .env

RUN npm run build

# Creating final production image
FROM node:18
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=builder /opt/node_modules ./node_modules
WORKDIR /opt/app

RUN apt-get update && \
    apt-get install libvips-dev \
    ghostscript graphicsmagick \
    sed \
    python3 -y 

# COPY --from=builder /opt/app ./
ENV PATH /opt/node_modules/.bin:$PATH

COPY --from=builder /opt/app/public ./public
RUN mkdir .next
# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=node:node /opt/app/.next/standalone ./
COPY --from=builder --chown=node:node /opt/app/.next/static ./.next/static

ARG PORT=4000
ENV PORT=${PORT}

EXPOSE ${PORT}

# Remove version from Quill editor in .next/static/css
RUN sed -i '/* Quill Editor/d' .next/static/css/*

# set hostname to localhost
ENV HOSTNAME "0.0.0.0"

RUN chown -R node:node /opt/app
USER node

# Run yarn dev, as we would via the command line 

CMD ["node", "server.js"]